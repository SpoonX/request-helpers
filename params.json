{"name":"Request-helpers","tagline":"A collection of request helpers. Usable with express js (and consequently, sails.js).","body":"# Request helpers\r\nA collection of request helpers. Usable with express js (and consequently, sails.js).\r\n\r\n## Installation\r\n`npm install --save request-helpers`\r\n\r\n## Methods\r\nCurrently only 1.\r\n\r\n### secureParameters (params, req[, forceCollect = false])\r\nAllows you to create a `Parameters` instance from the params sent with the request.\r\nThis method allows you to easily populate the parameters, making sure all required params were sent.\r\n\r\n**Example:**\r\n\r\n```javascript\r\nvar paramBlueprint = [\r\n  'username',                           // Required\r\n  'password',                           // Required.\r\n  {param: 'name', required: false},     // Optional. Default: null\r\n  {param: 'nickname', default: 'anon'}, // Optional. Default: anon\r\n  {param: 'enable', cast: 'boolean'}    // Cast value to boolean\r\n];\r\n\r\nvar params = helpers.secureParameters(paramBlueprint, req);\r\n\r\nparams.isValid(); // true\r\nparams.asObject(); // Returns POJO of parameters\r\nparams.get('key'); // Returns value for parameter `key`\r\nparams.getMissing(); // Returns an array of missing parameters\r\nparams.getMissingParameter(); // Returns the first missing parameter.\r\n\r\n// With forceCollect (third argument) you tell secureParameters to not stop collecting when it finds a missing parameter.\r\nDefaults to false.\r\nparams = helpers.secureParameters(paramBlueprint, req);\r\n```\r\n\r\n## Contributing\r\nGo for it. Submit a PR, with the tests, and watch the magic.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}